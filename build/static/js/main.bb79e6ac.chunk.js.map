{"version":3,"sources":["BlockDetail.tsx","SearchBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getBlockData","hash","a","fetch","res","json","useState","loading","setLoading","bits","block_index","fee","height","main_chain","mrkl_root","n_tx","next_block","nonce","prev_block","size","time","tx","ver","weight","blockData","setBlockData","useParams","useEffect","then","data","error","message","title","gutter","span","value","suffix","Date","toLocaleString","columns","dataIndex","valueType","copyable","search","render","_","vin_sz","vout_sz","out","map","reduce","b","dataSource","history","useHistory","onFinish","push","Item","name","style","marginBottom","lineHeight","rules","required","pattern","prefix","SearchOutlined","bordered","width","placeholder","Content","Layout","App","className","display","justifyContent","SearchBox","path","component","BlockDetail","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb79e6ac.chunk.js","sourcesContent":["import {Card, Col, message, Row, Space, Statistic, Table} from \"antd\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useParams} from \"react-router\";\r\nimport {IBtcBlockData} from \"./IBtcBlockData\";\r\nimport ProTable, {ProColumns} from '@ant-design/pro-table';\r\n\r\nconst getBlockData = async (hash: string): Promise<IBtcBlockData.RootObject> => {\r\n  const res = await fetch(`https://blockchain.info/rawblock/` + hash)\r\n  return res.json()\r\n}\r\n\r\nexport default () => {\r\n  const [loading, setLoading] = useState<boolean>(true)\r\n  const [blockData, setBlockData] = useState<IBtcBlockData.RootObject>({\r\n    bits: 0,\r\n    block_index: 0,\r\n    fee: 0,\r\n    hash: \"\",\r\n    height: 0,\r\n    main_chain: false,\r\n    mrkl_root: \"\",\r\n    n_tx: 0,\r\n    next_block: [],\r\n    nonce: 0,\r\n    prev_block: \"\",\r\n    size: 0,\r\n    time: 0,\r\n    tx: [],\r\n    ver: 0,\r\n    weight: 0\r\n  })\r\n  const { hash } = useParams<{ hash: string }>()\r\n\r\n  const columns: ProColumns<IBtcBlockData.Tx>[] = [\r\n    {\r\n      dataIndex: 'index',\r\n      valueType: 'indexBorder',\r\n    },\r\n    {\r\n      title: 'hash',\r\n      dataIndex: 'hash',\r\n      copyable: true,\r\n      search: false\r\n    },\r\n    {\r\n      title: 'input 数量',\r\n      valueType: 'text',\r\n      render: (_, tx) => {\r\n        return tx.vin_sz\r\n      }\r\n    },\r\n    {\r\n      title: 'out 数量',\r\n      valueType: 'text',\r\n      render: (_, tx) => {\r\n        return tx.vout_sz\r\n      }\r\n    },\r\n    {\r\n      title: '交易金额',\r\n      valueType: 'text',\r\n      render: (_, tx) => {\r\n        return tx.out.map((out) => out.value).reduce((a, b) => a + b, 0) / 100000000 + ' BTC'\r\n      }\r\n    },\r\n    {\r\n      title: '手续费',\r\n      valueType: 'text',\r\n      render: (_, tx) => {\r\n        return tx.fee / 100000000 + ' BTC'\r\n      }\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    getBlockData(hash).then(data => {\r\n      if (data.error) {\r\n        message.error(data.message)\r\n        setLoading(false)\r\n        return\r\n      }\r\n      setBlockData(data)\r\n      setLoading(false)\r\n    })\r\n  }, [hash])\r\n\r\n  return <>\r\n    <Card title=\"基本信息\" loading={loading}>\r\n      <Row gutter={16}>\r\n        <Col span={4}>\r\n          <Statistic title=\"Height\" value={blockData.height} />\r\n        </Col>\r\n        <Col span={4}>\r\n          <Statistic title=\"Number of Transactions\" value={blockData.n_tx} />\r\n        </Col>\r\n        <Col span={4}>\r\n          <Statistic title=\"Weight\" value={blockData.weight} />\r\n        </Col>\r\n        <Col span={4}>\r\n          <Statistic title=\"Size\" value={blockData.size} suffix='bytes'/>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Statistic title=\"Nonce\" value={blockData.nonce} />\r\n        </Col>\r\n        <Col span={4}>\r\n          <Statistic title=\"Timestamp\" value={blockData.time === 0 ? '未知' : new Date(blockData.time * 1000).toLocaleString()} />\r\n        </Col>\r\n      </Row>\r\n     <Space>\r\n     </Space>\r\n    </Card>\r\n    <Card>\r\n      <ProTable columns={columns} dataSource={blockData.tx} loading={loading}>\r\n      </ProTable>\r\n    </Card>\r\n  </>\r\n}","import {Form, Input} from \"antd\";\r\nimport {SearchOutlined} from \"@ant-design/icons\";\r\nimport React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default () => {\r\n  let history = useHistory();\r\n  return   <Form onFinish={(value: { hash: string }) => {\r\n    history.push('/hash/' + value.hash)\r\n  }} >\r\n    <Form.Item name='hash' style={{ marginBottom: 0, lineHeight: '56px' }} rules={[\r\n      { required: true, message: '请输入一个有效的 block hash' },\r\n      {\r\n        pattern: /^[0-9,a-z]{64}$/, message: '必须是一个有效的 hash '\r\n      }\r\n    ]}>\r\n      <Input prefix={<SearchOutlined />}  bordered={false} style={{\r\n        width: '800px'\r\n      }} placeholder=\"请输入 Hash\"/>\r\n    </Form.Item>\r\n  </Form>\r\n}","import React from 'react';\nimport './App.css';\nimport {Layout} from \"antd\";\nimport BlockDetail from \"./BlockDetail\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport SearchBox from \"./SearchBox\";\nconst { Content } = Layout;\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Layout>\n          <header style={{ display: 'flex', justifyContent: \"center\" }}>\n            <SearchBox/>\n          </header>\n          <Content>\n            <Route path=\"/hash/:hash\" component={BlockDetail}/>\n          </Content>\n      </Layout>\n    </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}